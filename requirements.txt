{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2456034,"sourceType":"datasetVersion","datasetId":1475063}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/mahmoudelshabrawy/arsenal-eda?scriptVersionId=193403010\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"\nimport numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-21T07:06:08.061324Z","iopub.execute_input":"2024-08-21T07:06:08.061709Z","iopub.status.idle":"2024-08-21T07:06:09.122717Z","shell.execute_reply.started":"2024-08-21T07:06:08.061675Z","shell.execute_reply":"2024-08-21T07:06:09.121424Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/arsenal-epl-2019-2021/prem_arsenal.csv\")\ndf","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:06:23.499579Z","iopub.execute_input":"2024-08-21T07:06:23.499996Z","iopub.status.idle":"2024-08-21T07:06:23.545225Z","shell.execute_reply.started":"2024-08-21T07:06:23.499965Z","shell.execute_reply":"2024-08-21T07:06:23.544043Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:07:17.144379Z","iopub.execute_input":"2024-08-21T07:07:17.145295Z","iopub.status.idle":"2024-08-21T07:07:17.152871Z","shell.execute_reply.started":"2024-08-21T07:07:17.145258Z","shell.execute_reply":"2024-08-21T07:07:17.151827Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:07:51.364959Z","iopub.execute_input":"2024-08-21T07:07:51.365363Z","iopub.status.idle":"2024-08-21T07:07:51.381046Z","shell.execute_reply.started":"2024-08-21T07:07:51.36533Z","shell.execute_reply":"2024-08-21T07:07:51.379692Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:08:27.507929Z","iopub.execute_input":"2024-08-21T07:08:27.508315Z","iopub.status.idle":"2024-08-21T07:08:27.527071Z","shell.execute_reply.started":"2024-08-21T07:08:27.508283Z","shell.execute_reply":"2024-08-21T07:08:27.525846Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['date_col'] = pd.to_datetime(df['date_col'])\ndf['home_score'] = df['score'].apply(lambda x: int(x.split('–')[0]))\ndf['away_score'] = df['score'].apply(lambda x: int(x.split('–')[1]))\ndf['result'] = df.apply(lambda row: 'Win' if row['home_score'] > row['away_score'] else 'Draw' if row['home_score'] == row['away_score'] else 'Loss', axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:09:30.10459Z","iopub.execute_input":"2024-08-21T07:09:30.105495Z","iopub.status.idle":"2024-08-21T07:09:30.123689Z","shell.execute_reply.started":"2024-08-21T07:09:30.105454Z","shell.execute_reply":"2024-08-21T07:09:30.122396Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:09:32.255256Z","iopub.execute_input":"2024-08-21T07:09:32.255984Z","iopub.status.idle":"2024-08-21T07:09:32.277197Z","shell.execute_reply.started":"2024-08-21T07:09:32.255949Z","shell.execute_reply":"2024-08-21T07:09:32.276033Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"home_stats = df[df['home'] == 'arsenal'].agg({\n    'home_score': ['mean', 'sum'],\n    'away_score': ['mean', 'sum'],\n    'points': 'sum'\n})\naway_stats = df[df['away'] == 'arsenal'].agg({\n    'home_score': ['mean', 'sum'],\n    'away_score': ['mean', 'sum'],\n    'points': 'sum'\n})\n\nprint(\"Home Stats:\\n\", home_stats)\nprint(\"Away Stats:\\n\", away_stats)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:09:42.511873Z","iopub.execute_input":"2024-08-21T07:09:42.51254Z","iopub.status.idle":"2024-08-21T07:09:42.53395Z","shell.execute_reply.started":"2024-08-21T07:09:42.512506Z","shell.execute_reply":"2024-08-21T07:09:42.532755Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Home Advantage\ndf['home_advantage'] = df['home'] == 'arsenal'\n\n# Match Outcome\ndf['match_outcome'] = df.apply(lambda row: 1 if row['home_score'] > row['away_score'] else 0 if row['home_score'] == row['away_score'] else -1, axis=1)\n\ndf.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:10:04.14919Z","iopub.execute_input":"2024-08-21T07:10:04.149573Z","iopub.status.idle":"2024-08-21T07:10:04.170597Z","shell.execute_reply.started":"2024-08-21T07:10:04.14954Z","shell.execute_reply":"2024-08-21T07:10:04.169685Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nplt.figure(figsize=(12, 6))\nsns.histplot(df[df['home'] == 'arsenal']['home_score'], kde=True, label='Home Score', color='blue', alpha=0.6)\nsns.histplot(df[df['away'] == 'arsenal']['away_score'], kde=True, label='Away Score', color='red', alpha=0.6)\nplt.title('Distribution of Scores (Home vs Away)')\nplt.xlabel('Score')\nplt.ylabel('Frequency')\nplt.legend()\nplt.grid(True)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:10:49.718293Z","iopub.execute_input":"2024-08-21T07:10:49.71923Z","iopub.status.idle":"2024-08-21T07:10:50.212237Z","shell.execute_reply.started":"2024-08-21T07:10:49.719194Z","shell.execute_reply":"2024-08-21T07:10:50.211177Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['game_date'] = pd.to_datetime(df['date_col'])\ndf.set_index('game_date', inplace=True)\ndf[['points']].resample('M').sum().plot(figsize=(12, 6), title='Points Earned per Game Over Time')\nplt.xlabel('Date')\nplt.ylabel('Points')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:10:58.560064Z","iopub.execute_input":"2024-08-21T07:10:58.560451Z","iopub.status.idle":"2024-08-21T07:10:58.967355Z","shell.execute_reply.started":"2024-08-21T07:10:58.56042Z","shell.execute_reply":"2024-08-21T07:10:58.966222Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Win-Loss Ratio by Referee\nreferee_performance = df.groupby('referee')['result'].value_counts(normalize=True).unstack().fillna(0)\nreferee_performance['win_loss_ratio'] = referee_performance['Win'] / referee_performance['Loss'].replace(0, 1)  # Avoid division by zero\n\nplt.figure(figsize=(12, 8))\nreferee_performance['win_loss_ratio'].sort_values().plot(kind='barh', color='purple')\nplt.title('Win-Loss Ratio by Referee')\nplt.xlabel('Win-Loss Ratio')\nplt.ylabel('Referee')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:11:13.874803Z","iopub.execute_input":"2024-08-21T07:11:13.875559Z","iopub.status.idle":"2024-08-21T07:11:14.264985Z","shell.execute_reply.started":"2024-08-21T07:11:13.875525Z","shell.execute_reply":"2024-08-21T07:11:14.263734Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"points_by_result = df.groupby('result')['points'].sum()\nplt.figure(figsize=(10, 6))\npoints_by_result.plot(kind='bar', color=['green', 'grey', 'red'])\nplt.title('Total Points Earned by Match Result')\nplt.xlabel('Match Result')\nplt.ylabel('Total Points')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:11:31.994443Z","iopub.execute_input":"2024-08-21T07:11:31.99487Z","iopub.status.idle":"2024-08-21T07:11:32.242049Z","shell.execute_reply.started":"2024-08-21T07:11:31.994836Z","shell.execute_reply":"2024-08-21T07:11:32.240905Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\ndf['month'] = df.index.month\ndf['year'] = df.index.year\nperformance_pivot = df.pivot_table(index='month', columns='year', values='points', aggfunc='mean')\nplt.figure(figsize=(12, 8))\nsns.heatmap(performance_pivot, cmap='YlGnBu', annot=True, fmt='.1f')\nplt.title('Average Points per Month and Year')\nplt.xlabel('Year')\nplt.ylabel('Month')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:12:43.711959Z","iopub.execute_input":"2024-08-21T07:12:43.71233Z","iopub.status.idle":"2024-08-21T07:12:44.158757Z","shell.execute_reply.started":"2024-08-21T07:12:43.712304Z","shell.execute_reply":"2024-08-21T07:12:44.157567Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"rolling_avg = df['points'].rolling(window=5).mean()\n\nplt.figure(figsize=(12, 6))\nplt.plot(df.index, df['points'], alpha=0.5, label='Points')\nplt.plot(df.index, rolling_avg, color='red', label='Rolling Average (Window=5)')\nplt.title('Points with Rolling Average')\nplt.xlabel('Date')\nplt.ylabel('Points')\nplt.legend()\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:12:53.902163Z","iopub.execute_input":"2024-08-21T07:12:53.903111Z","iopub.status.idle":"2024-08-21T07:12:54.677366Z","shell.execute_reply.started":"2024-08-21T07:12:53.903066Z","shell.execute_reply":"2024-08-21T07:12:54.676182Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create a correlation matrix\ndf['home_score'] = df['home_score'].astype(float)\ndf['away_score'] = df['away_score'].astype(float)\ncorrelation_matrix = df[['home_score', 'away_score', 'points']].corr()\n\n# Plot the heatmap\nplt.figure(figsize=(8, 6))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5)\nplt.title('Correlation Matrix of Performance Metrics')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:13:05.085044Z","iopub.execute_input":"2024-08-21T07:13:05.086159Z","iopub.status.idle":"2024-08-21T07:13:05.380958Z","shell.execute_reply.started":"2024-08-21T07:13:05.086122Z","shell.execute_reply":"2024-08-21T07:13:05.379824Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Box Plot of Points by Match Result\nplt.figure(figsize=(10, 6))\nsns.boxplot(x='result', y='points', data=df, palette='Set2')\nplt.title('Distribution of Points by Match Result')\nplt.xlabel('Match Result')\nplt.ylabel('Points')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:13:11.757227Z","iopub.execute_input":"2024-08-21T07:13:11.757613Z","iopub.status.idle":"2024-08-21T07:13:12.021185Z","shell.execute_reply.started":"2024-08-21T07:13:11.757582Z","shell.execute_reply":"2024-08-21T07:13:12.019941Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate win rates\nwin_rate_home = df[df['home_advantage']]['result'].value_counts(normalize=True).get('Win', 0)\nwin_rate_away = df[~df['home_advantage']]['result'].value_counts(normalize=True).get('Win', 0)\n\nplt.figure(figsize=(10, 6))\nplt.bar(['Home Advantage', 'Away'], [win_rate_home, win_rate_away], color=['blue', 'red'])\nplt.title('Win Rate with and without Home Advantage')\nplt.xlabel('Scenario')\nplt.ylabel('Win Rate')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:13:27.193414Z","iopub.execute_input":"2024-08-21T07:13:27.194253Z","iopub.status.idle":"2024-08-21T07:13:27.387408Z","shell.execute_reply.started":"2024-08-21T07:13:27.194219Z","shell.execute_reply":"2024-08-21T07:13:27.38629Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter Plot\nplt.figure(figsize=(10, 6))\nplt.scatter(df['home_score'], df['away_score'], alpha=0.5)\nplt.title('Home Score vs. Away Score')\nplt.xlabel('Home Score')\nplt.ylabel('Away Score')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:13:34.149955Z","iopub.execute_input":"2024-08-21T07:13:34.150739Z","iopub.status.idle":"2024-08-21T07:13:34.433174Z","shell.execute_reply.started":"2024-08-21T07:13:34.150705Z","shell.execute_reply":"2024-08-21T07:13:34.431717Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['cumulative_points'] = df['points'].cumsum()\n\nplt.figure(figsize=(12, 6))\nplt.plot(df.index, df['cumulative_points'], color='purple')\nplt.title('Cumulative Points Over Time')\nplt.xlabel('Date')\nplt.ylabel('Cumulative Points')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:13:42.494278Z","iopub.execute_input":"2024-08-21T07:13:42.494642Z","iopub.status.idle":"2024-08-21T07:13:42.840303Z","shell.execute_reply.started":"2024-08-21T07:13:42.494614Z","shell.execute_reply":"2024-08-21T07:13:42.839065Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Pie Chart\noutcome_counts = df['result'].value_counts()\n\nplt.figure(figsize=(8, 8))\nplt.pie(outcome_counts, labels=outcome_counts.index, autopct='%1.1f%%', colors=['green', 'grey', 'red'])\nplt.title('Proportion of Match Outcomes')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:13:52.723877Z","iopub.execute_input":"2024-08-21T07:13:52.724966Z","iopub.status.idle":"2024-08-21T07:13:52.85723Z","shell.execute_reply.started":"2024-08-21T07:13:52.724927Z","shell.execute_reply":"2024-08-21T07:13:52.856082Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['cumulative_wins'] = (df['result'] == 'Win').cumsum()\ndf['cumulative_games'] = (df['result'] != 'Draw').cumsum()  # Count non-draw games\ndf['cumulative_win_rate'] = df['cumulative_wins'] / df['cumulative_games']\nplt.figure(figsize=(12, 6))\nplt.plot(df.index, df['cumulative_win_rate'], color='blue')\nplt.title('Cumulative Win Rate Over Time')\nplt.xlabel('Date')\nplt.ylabel('Cumulative Win Rate')\nplt.grid(True)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:14:33.176126Z","iopub.execute_input":"2024-08-21T07:14:33.176511Z","iopub.status.idle":"2024-08-21T07:14:33.564581Z","shell.execute_reply.started":"2024-08-21T07:14:33.176481Z","shell.execute_reply":"2024-08-21T07:14:33.563445Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['rolling_mean'] = df['points'].rolling(window=10).mean()\ndf['rolling_std'] = df['points'].rolling(window=10).std()\n\nplt.figure(figsize=(12, 6))\nplt.plot(df.index, df['points'], alpha=0.5, label='Points')\nplt.plot(df.index, df['rolling_mean'], color='red', label='Rolling Mean (Window=10)')\nplt.plot(df.index, df['rolling_std'], color='orange', label='Rolling Std Dev (Window=10)')\nplt.title('Rolling Mean and Standard Deviation of Points')\nplt.xlabel('Date')\nplt.ylabel('Points')\nplt.legend()\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:15:00.472573Z","iopub.execute_input":"2024-08-21T07:15:00.472982Z","iopub.status.idle":"2024-08-21T07:15:00.924202Z","shell.execute_reply.started":"2024-08-21T07:15:00.472949Z","shell.execute_reply":"2024-08-21T07:15:00.922995Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, projection='3d')\nax.scatter(df['home_score'], df['away_score'], df['points'], alpha=0.5, c=df['points'], cmap='viridis')\n\nax.set_xlabel('Home Score')\nax.set_ylabel('Away Score')\nax.set_zlabel('Points')\nax.set_title('3D Scatter Plot of Home Score, Away Score, and Points')\n\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:15:47.78475Z","iopub.execute_input":"2024-08-21T07:15:47.785159Z","iopub.status.idle":"2024-08-21T07:15:48.021798Z","shell.execute_reply.started":"2024-08-21T07:15:47.785125Z","shell.execute_reply":"2024-08-21T07:15:48.020739Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['day_of_week'] = df.index.dayofweek\ndf['month'] = df.index.month\n\nheatmap_data = df.pivot_table(index='day_of_week', columns='month', values='result', aggfunc='count', fill_value=0)\n\n# Plot the heatmap\nplt.figure(figsize=(12, 8))\nsns.heatmap(heatmap_data, cmap='YlGnBu', annot=True, fmt='d')\nplt.title('Heatmap of Match Results by Day of Week and Month')\nplt.xlabel('Month')\nplt.ylabel('Day of Week')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:16:07.500647Z","iopub.execute_input":"2024-08-21T07:16:07.501053Z","iopub.status.idle":"2024-08-21T07:16:08.07417Z","shell.execute_reply.started":"2024-08-21T07:16:07.50102Z","shell.execute_reply":"2024-08-21T07:16:08.0728Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import plotly.express as px\n\nfig = px.scatter(df, x='home_score', y='away_score', color='result', \n                 size='points', hover_name=df.index, title='Interactive Scatter Plot of Home vs Away Scores')\nfig.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:16:23.287042Z","iopub.execute_input":"2024-08-21T07:16:23.287999Z","iopub.status.idle":"2024-08-21T07:16:26.209966Z","shell.execute_reply.started":"2024-08-21T07:16:23.287964Z","shell.execute_reply":"2024-08-21T07:16:26.208851Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:16:37.805525Z","iopub.execute_input":"2024-08-21T07:16:37.805969Z","iopub.status.idle":"2024-08-21T07:16:37.836755Z","shell.execute_reply.started":"2024-08-21T07:16:37.805936Z","shell.execute_reply":"2024-08-21T07:16:37.83571Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(12, 6))\nsns.kdeplot(data=df, x='home_score', y='away_score', cmap='Blues', fill=True)\nplt.title('Bivariate KDE Plot of Home and Away Scores')\nplt.xlabel('Home Score')\nplt.ylabel('Away Score')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:17:38.573533Z","iopub.execute_input":"2024-08-21T07:17:38.574347Z","iopub.status.idle":"2024-08-21T07:17:39.061315Z","shell.execute_reply.started":"2024-08-21T07:17:38.57431Z","shell.execute_reply":"2024-08-21T07:17:39.060138Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['external_factor'] = np.random.randn(len(df))  # Replace with actual data\ncorrelation_matrix = df[['points', 'home_score', 'away_score', 'external_factor']].corr()\nplt.figure(figsize=(10, 8))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5)\nplt.title('Correlation Matrix with External Factors')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:17:52.329628Z","iopub.execute_input":"2024-08-21T07:17:52.330736Z","iopub.status.idle":"2024-08-21T07:17:52.647323Z","shell.execute_reply.started":"2024-08-21T07:17:52.330695Z","shell.execute_reply":"2024-08-21T07:17:52.6462Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\nfeatures = df[['home_score', 'away_score', 'points']].dropna()\nscaler = StandardScaler()\nscaled_features = scaler.fit_transform(features)\n\npca = PCA(n_components=2)\npca_result = pca.fit_transform(scaled_features)\n\nplt.figure(figsize=(10, 6))\nplt.scatter(pca_result[:, 0], pca_result[:, 1], c=df['result'].astype('category').cat.codes, cmap='viridis', alpha=0.5)\nplt.colorbar(label='Match Result')\nplt.title('PCA of Match Scores and Points')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:18:21.412688Z","iopub.execute_input":"2024-08-21T07:18:21.413674Z","iopub.status.idle":"2024-08-21T07:18:22.074058Z","shell.execute_reply.started":"2024-08-21T07:18:21.413625Z","shell.execute_reply":"2024-08-21T07:18:22.072873Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install dtaidistance","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:19:00.779099Z","iopub.execute_input":"2024-08-21T07:19:00.779654Z","iopub.status.idle":"2024-08-21T07:19:14.514066Z","shell.execute_reply.started":"2024-08-21T07:19:00.779617Z","shell.execute_reply":"2024-08-21T07:19:14.512667Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.manifold import TSNE\n\n# Example high-dimensional features\nfeatures = df[['home_score', 'away_score', 'points']].fillna(0)\n\n# Apply t-SNE\ntsne = TSNE(n_components=2, random_state=42)\ntsne_result = tsne.fit_transform(features)\n\n# Plot t-SNE result\nplt.figure(figsize=(10, 8))\nplt.scatter(tsne_result[:, 0], tsne_result[:, 1], c=df['result'].astype('category').cat.codes, cmap='viridis', alpha=0.7)\nplt.colorbar(label='Match Result')\nplt.title('t-SNE Plot of Features')\nplt.xlabel('t-SNE Dimension 1')\nplt.ylabel('t-SNE Dimension 2')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:19:54.786343Z","iopub.execute_input":"2024-08-21T07:19:54.787584Z","iopub.status.idle":"2024-08-21T07:19:55.924126Z","shell.execute_reply.started":"2024-08-21T07:19:54.787538Z","shell.execute_reply":"2024-08-21T07:19:55.923005Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.manifold import MDS\nfrom sklearn.metrics import pairwise_distances\n\n# Compute pairwise distances\ndistances = pairwise_distances(df[['home_score', 'away_score']].fillna(0))\n\n# Apply MDS\nmds = MDS(n_components=2, dissimilarity='precomputed', random_state=42)\nmds_result = mds.fit_transform(distances)\n\n# Plot MDS result\nplt.figure(figsize=(10, 8))\nplt.scatter(mds_result[:, 0], mds_result[:, 1], c=df['points'], cmap='viridis', alpha=0.7)\nplt.colorbar(label='Points')\nplt.title('MDS Plot of Teams')\nplt.xlabel('MDS Dimension 1')\nplt.ylabel('MDS Dimension 2')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:19:39.585542Z","iopub.execute_input":"2024-08-21T07:19:39.585969Z","iopub.status.idle":"2024-08-21T07:19:40.126738Z","shell.execute_reply.started":"2024-08-21T07:19:39.585934Z","shell.execute_reply":"2024-08-21T07:19:40.125603Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.manifold import TSNE\n\nfeatures = df[['home_score', 'away_score', 'points']].fillna(0)\n\ntsne = TSNE(n_components=2, random_state=42)\ntsne_result = tsne.fit_transform(features)\n\nplt.figure(figsize=(10, 8))\nplt.scatter(tsne_result[:, 0], tsne_result[:, 1], c=df['result'].astype('category').cat.codes, cmap='viridis', alpha=0.7)\nplt.colorbar(label='Match Result')\nplt.title('t-SNE Plot of Features')\nplt.xlabel('t-SNE Dimension 1')\nplt.ylabel('t-SNE Dimension 2')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:20:05.558071Z","iopub.execute_input":"2024-08-21T07:20:05.558494Z","iopub.status.idle":"2024-08-21T07:20:07.149938Z","shell.execute_reply.started":"2024-08-21T07:20:05.55846Z","shell.execute_reply":"2024-08-21T07:20:07.148834Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(12, 6))\nsns.boxplot(x='result', y='points', data=df, palette='Set2')\nplt.title('Box Plot of Points by Match Result with Annotations')\nplt.xlabel('Match Result')\nplt.ylabel('Points')\n\nfor i, result in enumerate(df['result'].unique()):\n    y = df[df['result'] == result]['points']\n    plt.text(i, y.max(), f'Max: {y.max():.2f}', horizontalalignment='center')\n    plt.text(i, y.min(), f'Min: {y.min():.2f}', horizontalalignment='center')\n\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:20:15.588738Z","iopub.execute_input":"2024-08-21T07:20:15.589168Z","iopub.status.idle":"2024-08-21T07:20:16.41021Z","shell.execute_reply.started":"2024-08-21T07:20:15.589134Z","shell.execute_reply":"2024-08-21T07:20:16.409068Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, projection='3d')\nhome_scores = df['home_score'].fillna(0)\naway_scores = df['away_score'].fillna(0)\npoints = df['points'].fillna(0)\n\nX, Y = np.meshgrid(np.unique(home_scores), np.unique(away_scores))\nZ = np.array([[points[(home_scores == x) & (away_scores == y)].mean() for y in np.unique(away_scores)] for x in np.unique(home_scores)])\n\nax.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none')\nax.set_title('3D Surface Plot of Home Score vs. Away Score vs. Points')\nax.set_xlabel('Home Score')\nax.set_ylabel('Away Score')\nax.set_zlabel('Points')\n\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:20:41.54816Z","iopub.execute_input":"2024-08-21T07:20:41.548557Z","iopub.status.idle":"2024-08-21T07:20:41.855853Z","shell.execute_reply.started":"2024-08-21T07:20:41.54853Z","shell.execute_reply":"2024-08-21T07:20:41.85474Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from pandas.plotting import lag_plot\n\nplt.figure(figsize=(10, 6))\nlag_plot(df['points'].dropna(), lag=1)\nplt.title('Lag Plot of Points')\nplt.xlabel('Current Value')\nplt.ylabel('Lagged Value')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T07:21:00.61378Z","iopub.execute_input":"2024-08-21T07:21:00.614223Z","iopub.status.idle":"2024-08-21T07:21:00.89111Z","shell.execute_reply.started":"2024-08-21T07:21:00.614189Z","shell.execute_reply":"2024-08-21T07:21:00.889859Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-08-21T08:04:06.842569Z","iopub.execute_input":"2024-08-21T08:04:06.843526Z","iopub.status.idle":"2024-08-21T08:04:06.867977Z","shell.execute_reply.started":"2024-08-21T08:04:06.843487Z","shell.execute_reply":"2024-08-21T08:04:06.866702Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}